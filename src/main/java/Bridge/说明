桥接模式

桥接模式的核心是  将抽象化与实现化解耦，使得二者可以独立变化

个人理解的桥接模式应用在某个类中要需要拥有两个或者多个维度的其他类
如:一台电脑有多种种类类似台式机,笔记本电脑等,同时这些电脑都有各自的厂商,因此这台电脑从这个角度来看就有2个维度,
   分别是电脑种类与制造厂商.
   按照传统做法先是让各个类型电脑继承于电脑(抽象化),然后再由各个厂商来实现不同类型的电脑(实现化)
   这样导致的后果是要写 电脑种类数量×制造商数量的类.这个数量在任意维度越来越多时会很多,后期维护会很复杂,不符合开闭原则

   因此采用桥接模式,
   各个厂商实现同一个接口,由电脑类来持有这个接口并在构造函数上添加这个接口,其他电脑类型只需要继承电脑类即可.
   这样的话,我们想表达某个A厂商的笔记本电脑只需要 创建一个笔记本电脑并在构造方法上加入相应厂商即可.
   要换厂商也只需要更换,电脑类中的厂商即可,就像换个桥上去的感觉一样

总结:
      1、桥接模式实现了抽象化与实现化的脱耦。他们两个维度互相独立，不会影响到对方。

      2、对于两个独立变化的维度，使用桥接模式再适合不过了。

      3、对于“具体的抽象类”所做的改变，是不会影响到客户。