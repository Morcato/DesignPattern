单例模式

单例模式保证一个类仅有一个实例，并提供一个访问它的全局访问点。

单例模式特征:
1、单例类只能有一个实例。
2、单例类必须自己创建自己的唯一实例。(私有化构造方法)
3、单例类必须给所有其他对象提供这一实例。(提供getInstance方法)

在设计单例模式时需要考虑到线程安全问题
饿汉式单例指的是 在JVM加载时就初始化好此单例类,如果这个单例类属性特别多的话容易造成内存浪费
懒汉式单例指的是 只有在需要使用该单例时才初始化此单例类,可以避免内存浪费,但是需要慎重考虑在初始化时的线程安全问题以及效率问题

一般来说单例模式分为以下几种实现方式

1.简单懒汉式(线程不安全)---SimpleSingtonNotSafe

2.简单懒汉式(线程安全)---SimpleSingtonSafe   效率低

3.懒汉式(采用静态内部类控制初始化)---SingtonIternalClass

4.懒汉式(双重锁结构)---本项目里暂未实现,但他也是线程安全的,只是实现方式比较复杂

5.饿汉式(线程安全)---StarveSingtion  没法实现延迟初始化,容易造成内存浪费


一般来讲如果不怕浪费内存资源可以使用考虑第5种 饿汉式资源
需要延迟加载的话采用第3种方法
不推荐第1和第2中方式



